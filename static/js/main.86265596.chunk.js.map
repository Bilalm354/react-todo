{"version":3,"sources":["components/ToDoItem.js","components/ToDo.js","serviceWorker.js","index.js","App.js"],"names":["ToDoItem","props","item","deleteItem","className","text","onClick","ToDo","useState","id","list","setList","toDo","setToDo","createNewToDoItem","newTodo","length","Math","max","map","t","alert","todo","filter","key","type","value","onChange","e","target","onKeyPress","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qSAiBeA,G,MAdE,SAACC,GAAW,IACjBC,EAAoBD,EAApBC,KAAMC,EAAcF,EAAdE,WAEd,OACI,yBAAKC,UAAY,YACb,uBAAGA,UAAU,iBAAiBF,EAAKG,MACnC,4BAAQD,UAAU,kBAAkBE,QAAS,kBAAMH,EAAWD,KAA9D,QC2DGK,G,MAhEF,WAAO,IAAD,EACSC,mBAAS,CAC7B,CAACC,GAAG,EAAGJ,KAAM,mBACb,CAACI,GAAI,EAAGJ,KAAM,cAHH,mBACRK,EADQ,KACFC,EADE,OAKSH,mBAAS,IALlB,mBAKRI,EALQ,KAKFC,EALE,KAeTC,EAAoB,WAEtB,GAAKF,EAAL,CAIA,IACMG,EAAU,CAAEN,GAddC,GAAQA,EAAKM,OAAO,EACbC,KAAKC,IAAL,MAAAD,KAAI,YAAQP,EAAKS,KAAI,SAACC,GAAD,OAAOA,EAAEX,QAAO,EAErC,EAWkBJ,KAAMO,GACnCD,EAAQ,GAAD,mBAAKD,GAAL,CAAWK,KAClBF,EAAQ,SANJQ,MAAM,yBAmBRlB,EAAa,SAACmB,GAChBX,EAAQD,EAAKa,QAAO,SAACrB,GAAD,OAAUA,IAASoB,OAG3C,OACI,yBAAKlB,UAAU,QACX,wBAAIA,UAAW,eAAf,eACA,wBAAIA,UAAY,kBAAhB,mBACA,yBAAKA,UAAY,kBACb,yBAAKA,UAAU,gBACVM,EAAKS,KAAK,SAAAjB,GACP,OAAO,kBAAC,EAAD,CAAUsB,IAAKtB,EAAKO,GAAIP,KAAMA,EAAMC,WAAYA,QAI/D,yBAAKC,UAAU,aACX,2BAAOqB,KAAK,OAAOC,MAAOd,EAAMe,SApB5B,SAACC,GACjBf,EAAQe,EAAEC,OAAOH,QAmBoDI,WA1BlD,SAACF,GACN,UAAVA,EAAEJ,KACFV,OAyBQ,4BAAQV,UAAY,WAAWE,QAASQ,GAAxC,UC9CAiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBCFD,WACb,OAAO,kBAAC,EAAD,QDCO,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.86265596.chunk.js","sourcesContent":["import React from \"react\"\nimport \"./ToDoItem.css\"\n\nconst ToDoItem = (props) => {\n    const { item, deleteItem} = props;\n\n    return (\n        <div className = \"ToDoItem\">\n            <p className=\"ToDoItem-Text\">{item.text}</p>\n            <button className=\"ToDoItem-Delete\" onClick={() => deleteItem(item)}>  \n                -\n            </button>\n\n        </div>\n    );\n};\n\nexport default ToDoItem;","import React, {useState} from \"react\";\nimport ToDoItem from \"./ToDoItem\";\nimport \"./ToDo.css\";\n\nconst ToDo = () => {\n    const [list, setList] = useState([\n        {id:1, text: \"clean the house\" },\n        {id: 2, text: \"buy milk\"}\n    ]);\n    const [toDo, setToDo] = useState(\"\");\n\n    const generateId = () => {\n        if (list && list.length>1) {\n            return Math.max(...list.map((t) => t.id)) + 1;\n        } else {\n            return 1;\n        }\n    }\n\n    const createNewToDoItem = () => {\n        // validate todo \n        if (!toDo) {\n            alert(\"Please enter a todo!\");\n            return\n        }\n        const newId = generateId();\n        const newTodo = { id: newId, text: toDo };\n        setList([...list, newTodo])\n        setToDo(\"\");\n    };\n\n    const handleKeyPress = (e) => {\n        if (e.key === \"Enter\") {\n            createNewToDoItem();\n        }\n    };\n\n    const handleInput = (e) => {\n        setToDo(e.target.value);\n    }\n\n    const deleteItem = (todo) => {\n        setList(list.filter((item) => item !== todo));\n    }\n\n    return (\n        <div className=\"ToDo\">\n            <h1 className =\"ToDo-Header\">React To Do</h1>\n            <h3 className = \"ToDo-Subheader\">now with Hooks!</h3>\n            <div className = \"ToDo-Container\">\n                <div className=\"ToDo-Content\">\n                    {list.map((item => {\n                        return <ToDoItem key={item.id} item={item} deleteItem={deleteItem} />\n                    }))}\n                </div>\n\n                <div className=\"ToDoInput\">\n                    <input type=\"text\" value={toDo} onChange = {handleInput} onKeyPress = {handleKeyPress} />\n                    <button className = \"ToDo-Add\" onClick={createNewToDoItem}>\n                        +\n                    </button>\n                </div>\n\n            </div>\n        </div>\n    );\n};\n\nexport default ToDo;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\nimport \"./App.css\";\nimport ToDo from \"./components/ToDo\";\n\nexport default function App() {\n  return <ToDo />;\n}"],"sourceRoot":""}